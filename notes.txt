Basic tags:
    h(1,....,6), 
    p (block element)
    b: make a text bolder, 
    i: italic style
    br: make a space (you can add as much s you need)
    hr: adding a horizontal line
    big: make the text bigger
    small: make the text smaller
    sub: put the word a little bellow the whole text
    sup: put the word a little above the whole text
    h1
        h2
            h3
        h2
Formating HTML:
    sections:
        header: contains the navbar, logo...:
            nav: for links
        main: the main website contains articles section...
        footer: contains additional navigation link
        aside: for ads, content that dont have a direct relation to the core website

Links:
    a: (inline element)
        blank: open the link in new tab

Images:
    if i set either width or height html will resize the other correctly
Video:
    <video>
    poster: add an image before the video starts
    loop: start playing again automatically
youtube:
    fo to share, embed, and copy the html code

containes:
    <span>: inline containes
    <div> : block container

input:
    if a radio buttons have same name we can check just one of them
form:
    has those atributes:
        required: Specifies whether a form field needs to be filled in before the form can be submitted.

        minlength and maxlength: Specifies the minimum and maximum length of textual data (strings).

        min and max: Specifies the minimum and maximum values of numerical input types.

        type: Specifies whether the data needs to be a number, an email address, or some other specific preset type.

        pattern: Specifies a regular expression that defines a pattern the entered data needs to follow.

            a — Matches one character that is a (not b, not aa, and so on).
            abc — Matches a, followed by b, followed by c.
            ab?c — Matches a, optionally followed by a single b, followed by c. (ac or abc)
            ab*c — Matches a, optionally followed by any number of bs, followed by c. (ac, abc, abbbbbc, and so on).
            a|b — Matches one character that is a or b.
            abc|xyz — Matches exactly abc or exactly xyz (but not abcxyz or a or y, and so on).
            patternMismatch: Returns true if the value does not match the specified pattern, and false if it does match. If true, the element matches the :invalid CSS pseudo-class.
            tooLong: Returns true if the value is longer than the maximum length specified by the maxlength attribute, or false if it is shorter than or equal to the maximum. If true, the element matches the :invalid CSS pseudo-class.
            tooShort: Returns true if the value is shorter than the minimum length specified by the minlength attribute, or false if it is greater than or equal to the minimum. If true, the element matches the :invalid CSS pseudo-class.
            rangeOverflow: Returns true if the value is greater than the maximum specified by the max attribute, or false if it is less than or equal to the maximum. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes.
            rangeUnderflow: Returns true if the value is less than the minimum specified by the min attribute, or false if it is greater than or equal to the minimum. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes.
            typeMismatch: Returns true if the value is not in the required syntax (when type is email or url), or false if the syntax is correct. If true, the element matches the :invalid CSS pseudo-class.
            valid: Returns true if the element meets all its validation constraints, and is therefore considered to be valid, or false if it fails any constraint. If true, the element matches the :valid CSS pseudo-class; the :invalid CSS pseudo-class otherwise.
            valueMissing: Returns true if the element has a required attribute, but no value, or false otherwise. If true, the element matches the :invalid CSS pseudo-class.
            willValidate: Returns true if the element will be validated when the form is submitted; false otherwise.
            checkValidity(): Returns true if the element's value has no validity problems; false otherwise. If the element is invalid, this method also fires an invalid event on the element.
            reportValidity(): Reports invalid field(s) using events. This method is useful in combination with preventDefault() in an onSubmit event handler.
            setCustomValidity(message): Adds a custom error message to the element; if you set a custom error message, the element is considered to be invalid
            :valid CSS pseudo-class, which lets you apply a specific style to valid elements.

        :invalid CSS pseudo-class, and sometimes other UI pseudo-classes (e.g., :out-of-range) depending on the error, which lets you apply a specific style to invalid elements.
